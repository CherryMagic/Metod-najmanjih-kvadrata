#include <iostream>
#include <Eigen/Dense>
#include <vector>
#include <fstream>
using Eigen::MatrixXd;
using Eigen::VectorXd;
using namespace std;

//FUNKCIJA KOJA PROVERAVA DA LI MATRICA IMA NEGATIVNU SOPSTVENU VREDNOST
bool hasNegEigenvalue (MatrixXd A){
    Eigen::SelfAdjointEigenSolver<Eigen::MatrixXd> eigensolver(A);
    if (eigensolver.info() != Eigen::Success){ abort(); return false;}
    for (int i=0;i<eigensolver.eigenvalues().size();i++)
        if (eigensolver.eigenvalues()[i] < 0)
            return true;
    return false;
}

int main()
{
    ifstream in;
    in.open("in.txt");
    if (in.is_open()){
    //UCITAVAMO BROJ CLANOVA SUME, DIMENZIJU POLAZNOG I DIMENZIJU DOLAZNOG PROSTORA
    int k, n, m;
    in >> k >> n >> m;
    vector<double> alpha(k);
    vector<MatrixXd> A(k);
    vector<VectorXd> b(k);
    //u Sym I Vec CUVAMO SIMETRICNU MATRICU I VEKTOR KOJi SE POJAVLJUJU U JEDNACINI f'=0
    MatrixXd Sym(m,m);
    VectorXd Vec(m);
    for (int i=0;i<m;i++){
        for (int j=0;j<m;j++){
            Sym(i,j)=0;
        }
        Vec(i)=0;
    }
    //UCITAVAMO k PUTA:
    // alpha[i]
    // A[i]
    // b[i]
    for (int i=0;i<k;i++){
        in >> alpha[i];
        A[i].resize(n,m);
        b[i].resize(n);
        for (int j=0;j<n;j++)
            for (int l=0;l<m;l++){
                double x;
                in >> x;
                A[i](j,l) = x;
            }
        for (int j=0;j<n;j++){
            double x;
            in >> x;
            b[i](j) = x;
        }

        Sym += alpha[i] * A[i].transpose() * A[i];
        Vec += alpha[i] * A[i].transpose() * b[i];
    }

    //AKO Sym NIJE POZITIVNO POLUDEFINITNA, NEMA KONACNOG MINIMUMA
    if (hasNegEigenvalue(Sym)){
        cout << endl<<"Infimum iznosi minus beskonacno" << endl;
        cout << "Unesite bilo sta da napustite program" << endl;
        string s;
        cin >> s;
    }
    else{
        // POZIVOM FUNKCIJE ISPOD DOBIJA SE X KOJE JE MOZDA RESENJE SISTEMA
        // ZATIM VRACANJEM TOG X U JEDNACINU Sym*X = Vec PROVERAMO DA LI JE ZAISTA RESENJE
        // Pot TREBA PO NORMI DA BUDE BLISKO NULI
        VectorXd X = Sym.ldlt().solve(Vec);
        VectorXd Pot = Sym*X - Vec;
        double norm = 0;
        for (int i=0;i<k;i++)
            norm += Pot(i)*Pot(i);
        norm = sqrt(norm);
        if ( norm < 0.001 ){
            // UKOLIKO JE ZAISTA RESENJE, VRACAMO U f DA DOBIJEMO MINIMALNU VREDNOST
            double minvalue = 0;
            for (int i=0;i<k;i++){
                minvalue += alpha[i] * (A[i] * X - b[i]).dot(A[i]*X - b[i]);
            }
            cout << "Infimum funkcije iznosi "<<minvalue<<" i postize se u:"<<endl<<X<<endl;
        }
        //AKO SISTEM Sym*X = Vec NEMA RESENJA, ONDA IZVOD f-A NEMA NULA, PA NEMA NI KONACNOG INFIMUMA
        else cout << "Infimum iznosi minus beskonacno" << endl;
        cout << "Unesite bilo sta da napustite program" << endl;
        string s;
        cin >> s;
    }
    }
    else{
        cout << "Neuspesno ucitavanje podataka" << endl;
        cout << "Unesite bilo sta da napustite program" << endl;
        string s;
        cin >> s;
    }
    return 0;
}
